name: Test Action

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # build:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, windows-latest, macos-latest]

  #   runs-on: ${{ matrix.os }}

  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v4
  #     - name: Setup
  #       uses: ./.github/actions/flutter-setup

  #     - name: Run Regular Tests
  #       run: |
  #         flutter test

  # test_linux:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v4
  #     - name: Setup
  #       uses: ./.github/actions/flutter-setup

  #     - name: Run Integration Tests
  #       working-directory: example
  #       shell: bash
  #       run: |
  #         xvfb-run flutter test ./integration_test/original_package_test.dart -d linux;
  #         xvfb-run flutter test ./integration_test/path_provider_linux_test.dart -d linux;

  test_windows:
    # needs: build
    runs-on: windows-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/flutter-setup

      - name: Run Integration Tests
        working-directory: example
        shell: bash
        run: |
          flutter test \integration_test\original_package_test.dart -d windows;
          flutter test \integration_test\path_provider_windows_test.dart -d windows;

  # text_macos:
  #   needs: build
  #   runs-on: macos-latest

  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v4
  #     - name: Setup
  #       uses: ./.github/actions/flutter-setup

  #     - name: Run Integration Tests
  #       working-directory: example
  #       shell: bash
  #       run: |
  #         flutter test ./integration_test/original_package_test.dart -d macos;
  #         flutter test ./integration_test/path_provider_foundation_test.dart -d macos;

  test_android:
    # needs: test_linux
    runs-on: ubuntu-latest

    strategy:
      matrix:
        api-level: [21, 35]

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/flutter-setup

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Generate AVD snapshot for caching.
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          cores: 3
          working-directory: example
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          disable-animations: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: echo "Generated AVD snapshot for caching."

      - name: Run Integration Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          cores: 3
          working-directory: example
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          disable-animations: false
          script: .github/scripts/android-integration-test.sh
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none

  #   - name: Gradle cache
  #     if: runner.os == 'Linux'
  #     uses: gradle/actions/setup-gradle@v3

  #   - name: AVD cache
  #     uses: actions/cache@v4
  #     id: avd-cache
  #     if: runner.os == 'Linux'
  #     with:
  #       path: |
  #         ~/.android/avd/*
  #         ~/.android/adb*
  #       key: avd-${{ inputs.android_api_level }}

  #   - name: create AVD and generate snapshot for caching
  #     if: steps.avd-cache.outputs.cache-hit != 'true'
  #     uses: reactivecircus/android-emulator-runner@v2
  #     with:
  #       api-level: ${{ matrix.api-level }}
  #       force-avd-creation: false
  #       emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
  #       disable-animations: false
  #       script: echo "Generated AVD snapshot for caching."

  #   steps:
  #     - name: "Setup"
  #       uses: ./.github/actions/flutter-setup

  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2

  #     - name: Install Linux Dependencies
  #       if: runner.os == 'Linux'
  #       run: |
  #         sudo apt-get update -y
  #         sudo apt-get install -y ninja-build libgtk-3-dev xvfb

  #     - name: Install Dependencies
  #       run: |
  #         flutter pub get

  #     - name: Print Device Info
  #       run: |
  #         flutter devices

  #     - name: Run Main Tests
  #       run: |
  #         flutter test

  #     - name: Run Integration Tests
  #       working-directory: example
  #       shell: bash
  #       run: |
  #         if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
  #           flutter test .\integration_test\original_package_test.dart -d windows;
  #           flutter test .\integration_test\path_provider_windows_test.dart -d windows;
  #         elif [[ "${{ matrix.os }}" == "Linux" ]]; then
  #           xvfb-run flutter test ./integration_test/original_package_test.dart -d linux;
  #           xvfb-run flutter test ./integration_test/path_provider_linux_test.dart -d linux;
  #         fi

  # test_macos_and_ios:
  #   runs-on: macos-latest

  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v4

  #     - name: Set up Flutter
  #       uses: subosito/flutter-action@v2

  #     - name: Install Simulator
  #       id: simulator
  #       uses: futureware-tech/simulator-action@v4
  #       with:
  #         model: "iPhone 16"
  #         wait_for_boot: true

  #     - name: Install Dependencies
  #       run: |
  #         flutter pub get

  #     - name: Print Device Info
  #       run: |
  #         flutter devices

  #     - name: Run Main Tests
  #       run: |
  #         flutter test

  #     - name: Run Integration Tests
  #       working-directory: example
  #       shell: bash
  #       run: |
  #         flutter test ./integration_test/original_package_test.dart -d macos;
  #         flutter test ./integration_test/path_provider_foundation_test.dart -d macos;
  #         flutter test ./integration_test/original_package_test.dart -d ${{ steps.simulator.outputs.udid }};
  #         flutter test ./integration_test/path_provider_foundation_test.dart -d ${{ steps.simulator.outputs.udid }};
